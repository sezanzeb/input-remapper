#!/usr/bin/python3
# -*- coding: utf-8 -*-
# input-remapper - GUI for device specific keyboard mappings
# Copyright (C) 2022 sezanzeb <proxima@sezanzeb.de>
#
# This file is part of input-remapper.
#
# input-remapper is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# input-remapper is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with input-remapper.  If not, see <https://www.gnu.org/licenses/>.


"""Starts the root reader-service."""
import asyncio
import os
import sys
import atexit
import signal
from argparse import ArgumentParser

from inputremapper.logger import update_verbosity
from inputremapper.groups import _Groups


if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument(
        '-d', '--debug', action='store_true', dest='debug',
        help='Displays additional debug information', default=False
    )

    options = parser.parse_args(sys.argv[1:])

    update_verbosity(options.debug)

    # import input-remapper stuff after setting the log verbosity
    from inputremapper.gui.reader_service import ReaderService

    def on_exit():
        """Don't remain idle and alive when the GUI exits via ctrl+c."""
        # makes no sense to me, but after the keyboard interrupt it is still
        # waiting for an event to complete (`S` in `ps ax`), even when using
        # sys.exit
        os.kill(os.getpid(), signal.SIGKILL)

    atexit.register(on_exit)
    groups = _Groups()
    reader_service = ReaderService(groups)
    loop = asyncio.get_event_loop()
    loop.run_until_complete(reader_service.run())
